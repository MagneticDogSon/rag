import streamlit as st
import yaml
from ingestion import create_vector_store
import ollama

st.set_page_config(page_title='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', page_icon=None, layout="wide", initial_sidebar_state="collapsed")

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
with open('./config.yaml', "r") as f:
    conf = yaml.safe_load(f)
    f.close()

collection_name = str(conf["collection_name"])
path_files = str(conf["path_files"])
chunk_overlap = int(conf["chunk_overlap"])
chunk_size = int(conf["chunk_size"])
sep = str(conf["sep"])
embeding = str(conf["embeding"])

temp = float(conf["temp"])
top_k = int(conf["top_k"])
top_p = float(conf["top_p"])
model = str(conf["model"])

search = str(conf["search"])
k = int(conf["k"])
score_threshold = float(conf["score_threshold"])
fetch_k = int(conf["fetch_k"])
lambda_mult = float(conf["lambda_mult"])

###############–ù–ê–°–¢–†–û–ô–ö–ò##########################

st.title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
st.divider()

col1, col2, col3 = st.columns([2, 1, 2])
with col1:
    with st.container(border=False):
        st.title('–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞')

        path_files_new = st.text_input("–ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏:")

        collection_name_new = st.text_input("–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")

        chunk_size_new = st.slider('–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:', 0, 1000, chunk_size, step=100,
                                   help="–ö–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞")
        chunk_overlap_new = st.slider('–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:', 0, 500, chunk_overlap, step=50,
                                      help="–ö–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞")

        separator_new = st.selectbox("–ú–µ—Ç–æ–¥ —Ä–∞–∑–±–∏—Ç–∏–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:",
                                     ("RecursiveCharacterTextSplitter",
                                      "CharacterTextSplitter",
                                      "SentenceTransformersTokenTextSplitter",
                                      "TokenTextSplitter"))

        embeding_new = st.selectbox("–ú–æ–¥–µ–ª—å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è:", ("BAAI/bge-m3", "Embeding_2"))

        if st.button("–°–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É", type="primary"):
            with st.spinner(""):
                st.toast("–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö....", icon="‚ùå")
                create_vector_store()
                st.toast("–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ", icon="üî•")

with col2:
    with st.container(border=False):
        st.write("")

with col3:
    with st.container(border=False):
        st.title('–ü–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ')

        search_new = st.selectbox("–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞", ("similarity", "mmr", "similarity_score_threshold", ""))

        if search_new == "similarity":
            fetch_k_new_disable = True
            score_threshold_disable = True
            lambda_mult_new_disabled = True

        if search_new == "mmr":
            fetch_k_new_disable = True
            score_threshold_disable = False
            lambda_mult_new_disabled = True

        if search_new == "similarity_score_threshold":
            fetch_k_new_disable = False
            score_threshold_disable = True
            lambda_mult_new_disabled = False

        k_new = st.slider('–ö–æ–ª-–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞:', 0, 10, k, step=1,
                          help="–ö–æ–ª-–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ LLM")

        score_threshold = st.slider('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞:', 0.0, 1.0, score_threshold, step=0.1,
                                    help=" –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º",
                                    disabled=score_threshold_disable)

        fetch_k_new = st.slider('fetch_k:', 0, 20, fetch_k, step=1,
                                help="",
                                disabled=fetch_k_new_disable, )

        lambda_mult_new = st.slider('lambda_mult:', 0.0, 1.0, lambda_mult, step=0.1,
                                    help="",
                                    disabled=lambda_mult_new_disabled)

col4, col5, col6 = st.columns([2, 1, 2])
with col4:
    with st.container(border=False):
        st.divider()
        st.title('–ú–æ–¥–µ–ª—å')

        # model_new = st.selectbox("–ú–æ–¥–µ–ª—å", ("llama3.1", "gemma2:2b", "mistral-nemo"))

        models = [m['name'] for m in ollama.list()["models"]]

        index = models.index("llama3.1:latest")

        model_new = st.selectbox("–ú–æ–¥–µ–ª—å", options=models, index=index)

        top_p_new = st.slider('Top-p:', 0.0, 1.0, top_p, step=0.1,
                              help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –º–∞—Å—Å–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
        top_k_new = st.slider('Top-k:', 0, 10, top_k, step=1,
                              help="–í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
        temp_new = st.slider('Temp:', 0.0, 1.0, temp, step=0.1,
                             help="–ß–µ–º –Ω–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã , —Ç–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–º—ã—Å–ª–µ —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω")

        st.button("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary", on_click=None)

with col5:
    with st.container(border=False):
        st.write("")

with col6:
    with st.container(border=False):
        st.write("")

# –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Ñ–∏–≥
to_yaml = {}
to_yaml['path_files'] = path_files
to_yaml['collection_name'] = collection_name
to_yaml['chunk_size'] = chunk_size_new
to_yaml['chunk_overlap'] = chunk_overlap_new
to_yaml['sep'] = separator_new
to_yaml['embeding'] = embeding_new

to_yaml['top_p'] = top_p_new
to_yaml['top_k'] = top_k_new
to_yaml['temp'] = temp_new
to_yaml['model'] = model_new

to_yaml['search'] = search_new
to_yaml["k"] = k_new
to_yaml["score_threshold"] = score_threshold
to_yaml["fetch_k"] = fetch_k
to_yaml["lambda_mult"] = lambda_mult

with open('config.yaml', 'w') as f:
    yaml.dump(to_yaml, f)
    f.close()
